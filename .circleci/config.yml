version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  kubernetes: circleci/kubernetes@0.4.0
  aws-eks: circleci/aws-eks@0.2.3
  docker: circleci/docker@2.0.1

executors:
  python:
    docker:
      - image: circleci/python:3.7.3-stretch
  aws:
    docker:
      - image: amazon/aws-cli

jobs:
  lint:
    executor: python
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv devops
            . devops/bin/activate
            make install
            # Install hadolint
            # sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            # sudo chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . devops/bin/activate
            make lint
  build:
    machine: true
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Build, tag and push docker image to docker.io
          command: |
            docker build --tag capstoneproject:${CIRCLE_WORKFLOW_ID:0:7} .
            docker login --username ${DOCKER_USERNAME} --password ${DOCKER_PASSWORD}
            docker tag capstoneproject:${CIRCLE_WORKFLOW_ID:0:7} elshadrzayev/capstoneproject:${CIRCLE_WORKFLOW_ID:0:7}
            docker push elshadrzayev/capstoneproject:${CIRCLE_WORKFLOW_ID:0:7}

  create-small-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ""
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
            echo "eksctl is already installed"
            exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
            SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ""

  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the deployment
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/capstoneproject

  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the deployment
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Test cluster
          command: |
            kubectl get services
            kubectl get nodes
            kubectl get deployment

workflows:
  capstoneproj:
    jobs:
      # - lint
      # - build:
      #     requires:
      #       - lint
      - create-small-cluster:
          cluster-name: capstoneproject
      # - aws-eks/create-cluster:
      #     cluster-name: capstoneproject
      # - create-deployment:
      #     cluster-name: capstoneproject
      #     requires:
      #       - aws-eks/create-cluster
      # - test-cluster:
      #     cluster-name: capstoneproject
      #     requires:
      #       - create-deployment
      # - aws-eks/delete-cluster:
      #     cluster-name: capstoneproject
      #     requires:
      #       - test-cluster
